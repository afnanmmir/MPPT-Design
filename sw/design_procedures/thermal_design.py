"""_summary_
@file       thermal_design.py
@author     Matthew Yu (matthewjkyu@gmail.com)
@brief      Calculate design parameters of thermals for a DC-DC boost converter.
@version    0.0.0
@date       2023-03-02
"""

import matplotlib.pyplot as plt
import numpy as np

# Assume via size are 0.4|0.2 mm,
# Board insulator is FR4
# Four layer board, all with copper pours
# 1oz copper layers
# thermal pad
r_fr4 = 10  # C/W
r_via = 83.3  # C/W/VIA
r_fcu = 0.081  # C m^2/W
r_bcu = 0.081  # C m^2/W
r_epo = 7.14  # C m^2/W


def get_switch_thermals(t_a, t_j, p_sw_bud, r_jb, r_jc, r_sa, area_hs, num_vias):
    """_summary_
    Get the minimum board area (one side) to dissipate the amount of heat
    generated by the chip from a specified ambient to maximum temperature.

    Args:
        t_a (float): Ambient temperature
        t_j (float): Target temperature
        p_sw_bud (float): The maximum power dissipation per switch
        r_jb (float): Thermal resistance of the junction to board
        r_jc (float): Thermal resistance of the junction to case
        r_sa (float): Thermal resistnace from sink to ambient
        area_hs (float): Area of the heatsink, in m^2
        num_vias (int): Number of vias

    Returns:
        _type_: _description_
    """

    # Maximum resistance to meet t_j heating
    target_r_ja = (t_j - t_a) / p_sw_bud

    def get_r_ja(area_fcu, area_bcu, r_jb_, r_jc_, r_sa_, area_hs_, num_vias_):
        # Vias in parallel to each other
        r_vias = r_via / num_vias_

        # FR4 in parallel to vias
        r_a = (r_fr4 * r_vias) / (r_fr4 + r_vias)

        # BCU is a function of exposed area
        r_bcu_ = r_bcu / area_bcu

        # BCU in series with A
        r_b = r_bcu_ + r_a

        # FCU is a function of exposed area
        r_fcu_ = r_fcu / area_fcu

        # FCU in parallel with B
        r_c = (r_fcu_ * r_b) / (r_fcu_ + r_b)

        # R_JB in series with C
        r_jd = r_jb_ + r_c

        # R_JH is a function of exposed area
        r_jh = r_sa_ + r_jc_ + r_epo / area_hs_

        # HS in parallel with D
        r_je = (r_jh * r_jd) / (r_jh + r_jd)

        return r_je

    # For a given area of top and bottom copper:
    x = []
    y = []
    z = []
    a = []
    for i in np.linspace(1e-5, 0.005, 100):
        for j in np.linspace(1e-5, 0.005, 100):
            # I and J are in m^2 (AREA)
            expected_r_ja = get_r_ja(i, j, r_jb, r_jc, r_sa, area_hs, num_vias)

            # Given 4 layer board, improve result by 30%
            expected_r_ja *= 0.7

            if expected_r_ja <= target_r_ja:
                x.append(i)
                y.append(j)
                z.append(expected_r_ja)
                a.append(i + j)

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(np.multiply(x, 1000000), np.multiply(y, 1000000), z, c=z)
    ax.set_title("R_JA as a function of TCU area and BCU area")
    ax.set_xlabel("FCU (mm^2)")
    ax.set_ylabel("BCU (mm^2)")
    ax.set_zlabel("R_JA (*C/W)")
    ax.set_zlim(0, target_r_ja)

    plt.tight_layout()
    plt.savefig("thermal_sizing_map.png")
    plt.show()

    return np.min(a)
